% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simRec.R
\name{simRec}
\alias{simRec}
\alias{simRecData}
\title{Simulated Survival times or Recurrent Events}
\usage{
simRec(z = 0, zCoef = 1, rho = 1, rhoCoef = 1, origin = 0,
       endTime = 3, frailty = FALSE, recurrent = TRUE,
       method = c("thinning", "inverse.cdf"),
       arguments = list(x = list(), xCoef = list(),
                        rho = list(), frailty = list()), ...)

simRecData(nProcess = 1, z = 0, zCoef = 1, rho = 1, rhoCoef = 1,
           origin = 0, endTime = 3, frailty = FALSE, recurrent = TRUE,
           method = c("thinning", "inverse.cdf"),
           arguments = list(z = list(), zCoef = list(),
                            rho = list(), frailty = list()), ...)
}
\arguments{
\item{z}{Time-invariant or time-varying covariates. The default value is
\code{0} for no covariate effect.  This argument should be a numeric
vector for time-invariant covariates or a function of time that returns
a numeric vector for time-varying covariates.}

\item{zCoef}{Time-invariant or time-varying coefficients of covariates. The
default value is \code{1}. Similar to the argument \code{x}, this
argument should be a numeric vector for time-invariant coefficients or a
function of time that returns a numeric vector for time-varying
coefficients. The length of the numeric vector specified or returned
from \code{z} and \code{zCoef} has to be always the same.}

\item{rho}{Baseline rate (or intensity) function for the Poisson process.
The default is \code{1} for a homogenous Poisson process of unit
intensity. This argument can be either a non-negative numeric value for
a homogenous Poisson process or a function of time for a non-homogenous
process.}

\item{rhoCoef}{Coefficients of baseline rate function. The default value is
\code{1}. It can be useful when \code{rho} is a function generating
spline bases.}

\item{origin}{The time origin set to be \code{0} by default.}

\item{endTime}{The end of follow-up time set to be \code{3} by default.}

\item{frailty}{Frailty effect. An optional logical value indicating whether
to consider a frailty model or a function that produces the frailty
effect.  The default value is \code{FALSE} for no frailty effect. If
\code{TRUE}, a frailty factor from Gamma distribution will be used and
the shape and scale parameter has to be specified through a list named
\code{frailty} in \code{arguments}. Similar to \code{z}, \code{zCoef},
and \code{rho}, a function or its name can be specified for other
distribution of the frailty effect. The specified function should
randomly return a positive numeric value. For example, the functions
that generate random numbers following a certain distribution from
\code{stats} package can directly used. Again, all the arguments of the
function can be specified through a list named \code{frailty} in
\code{arguments}. Note that \code{n = 1} will be implicitly specified if
the function has an argument named \code{n}, which is designed for those
common functions generating random numbers from \code{stats} package.}

\item{recurrent}{A logical value with default value \code{TRUE} indicating
whether to generate recurrent event data or survival data (i.e. the
first event only).}

\item{method}{A character string specifying the method for generating
simulated recurrent or survival data. The default method is thinning
method (Lewis and Shedler, 1979). Another available option is the method
based on inverse cumulative distribution function (CDF). When the rate
function may go to infinite, the inverse CDF method is used and a
warning will be thrown out if the thinning method is initially
specified.}

\item{arguments}{Other arguments that can be specified through a named list
for those time-varying functions.}

\item{...}{Other arguemtns for future usage.}

\item{nProcess}{Number of stochastic processes. A positive number should be
speicified. The default value is \code{1}.}
}
\value{
A \code{simRec} S4 class object.
}
\description{
This function generates simulated recurrent events or survival time (the
first event time) from one stochastic process. For each process, a
time-invariant or time-varying baseline hazard rate (intensity) function of
failure can be specified.  Covariates and their coefficients can be
specified and are incorporated based on the Cox proportional hazard model
(Cox, 1972) for survival data or Andersen-Gill model (Andersen and Gill,
1982) for recurrent events. In addition, a frailty effect can be considered.
Conditional on predictors (or covariates) and the unobserved frailty effect,
the process is a Poisson process.
}
\details{
The thinning method (Lewis and Shedler, 1979) is applied for bounded hazard
rate function by default. The method based on inverse cumulative
distribution function (CDF) is also available for possibly unbounded but
integrable rate function over the given time period.

For \code{z}, \code{zCoef}, and \code{rho}, a function of time can be
specified for time-varying effect.  The (first) argument of the input
function has to be the time (not need to be named as "time" though). Other
arguments of the function can be specified through a named list in
\code{arguments}.
}
\examples{
library(reda)
set.seed(1216)

### time-invariant covariates and coefficients
## one process
simRec(z = c(0.5, 1), zCoef = c(1, 0))
simRec(z = 1, zCoef = 0.5, recurrent = FALSE)

## simulated data
simRecData(1, z = c(0.5, 1), zCoef = c(1, 0), endTime = 2)
simRecData(3, z = cbind(rnorm(3), 1), zCoef = c(1, 0))
simRecData(5, z = matrix(rnorm(5)), zCoef = 0.5, recurrent = FALSE)

### time-varying covariates and time-varying coefficients
zFun <- function(timeVec, intercept) {
   c(timeVec / 10 + intercept, as.numeric(timeVec > 1))
}
zCoefFun <- function(timeVec, shift) {
  c(sqrt(timeVec + shift), 1)
}
simRec(z = zFun, zCoef = zCoefFun,
       arguments = list(z = list(intercept = 0.1),
                        zCoef = list(shift = 0.1)))

## same function of time for all processes
simRecData(3, z = zFun, zCoef = zCoefFun,
           arguments = list(z = list(intercept = 0.1),
                            zCoef = list(shift = 0.1)))

## same function within one process but different between processes
## use quote function in the arguments
simDat <- simRecData(3, z = zFun, zCoef = zCoefFun,
                     arguments = list(
                         z = list(intercept = quote(rnorm(1) / 10)),
                         zCoef = list(shift = 0.1)
                    ))
## check the intercept randomly generated,
## which should be the same within each ID but different between IDs.
with(simDat, cbind(ID, intercept = X.1 - time / 10))

### non-negative time-varying baseline hazard rate function
simRec(rho = function(timeVec) { sin(timeVec) + 1 })
simRecData(3, origin = rnorm(3), endTime = rnorm(3, 5),
           rho = function(timeVec) { sin(timeVec) + 1 })
## specify other arguments
simRec(rho = function(a, b) { cos(a + b) + 1 },
       arguments = list(rho = list(b = 1)))
simRecData(z = cbind(rnorm(3), rbinom(3, 1, 0.5)),
           rho = function(a, b) { cos(a + b) + 1 },
           arguments = list(rho = list(b = 1)))

## quadratic I-splines with one internal knot at "time = 1"
## (using function 'iSpline' from splines2 package)
simRec(rho = "iSpline", rhoCoef = c(0.2, 0.5, 0.3, 0.4),
       arguments = list(rho = list(degree = 2, knots = 1, intercept = TRUE,
                                   Boundary.knots = c(0, 3))))

### frailty effect
## The default distribution is Gamma distribution
simRec(z = c(0.5, 1), zCoef = c(1, 0), frailty = TRUE,
       arguments = list(frailty = list(shape = 2, scale = 0.5)))
## equivalent to the following function call
simRec(z = c(0.5, 1), zCoef = c(1, 0), frailty = "rgamma",
       arguments = list(frailty = list(shape = 2, scale = 0.5)))
## lognormal with mean zero
logNorm <- function(a) exp(rnorm(n = 1, mean = 0, sd = a))
simRec(z = c(0.5, 1), zCoef = c(1, 0), frailty = logNorm,
       arguments = list(frailty = list(a = 1)))

}
\references{
Andersen, P. K., & Gill, R. D. (1982). Cox's regression model for counting
processes: A large sample study. \emph{The annals of statistics}, 10(4),
1100--1120.

Cox, D. R. (1972). Regression models and life-tables.
\emph{Journal of the Royal Statistical Society. Series B
(Methodological)}, 34(2), 187--220.

Lewis, P. A., & G. S. Shedler. (1979). Simulation of
Nonhomogeneous Poisson Processes by Thinning.
\emph{Naval Research Logistics Quarterly},
26(3), Wiley Online Library: 403--13.
}
